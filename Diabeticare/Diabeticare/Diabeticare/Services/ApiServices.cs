using System;
using System.Threading.Tasks;
using System.Net.Http;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Net;
using Diabeticare.Views;

namespace Diabeticare.Services
{
    public class ApiServices
    {
        private readonly static HttpClient HttpClient;

        static ApiServices()
        {
            HttpClient = new HttpClient();

            // Might not be enough seconds
            HttpClient.Timeout = TimeSpan.FromSeconds(3);
        }

        private HttpRequestMessage createHttpRequestMessage(HttpMethod method, string path, string content, string token)
        {
            /*
             * Creates a HttpRequestMessage object
             * 
             * Arguments
             *  method: HttpMethod
             *      The request method (GET, POST, etc.)
             *  path: string
             *      Specific resource to access
             *  content: string
             *      Message content
             *  token: string
             *      A valid CSRF token generated by the server
             *
             * Return
             *  Request Message: HttpRequestMessage
             *      A HttpRequestMessage populated with arguments
             */

            return new HttpRequestMessage
            {
                Method = method,
                RequestUri = new Uri($"http://{App.server_addr}/{path}"),
                Headers =
                {
                    { "X-Version", "1" },
                    { "X-CSRFToken", $"{token}"},
                    { HttpRequestHeader.ContentType.ToString(), "application/json" }
                },
                Content = new StringContent(content)
            };
        }

        private async Task<string> FetchToken()
        {
            /*
             * Sends a GET request to the server for a randomly generated CSRF token
             * Returns the CSRF token as a string, or null if connection to server failed
             * 
             * Return
             *  token: string
             *      A generated CSRF token
             */

            try
            {
                Uri get_uri = new Uri($"http://{App.server_addr}/get_token");
                HttpResponseMessage get_response = await HttpClient.GetAsync(get_uri);
                string responseBody = await get_response.Content.ReadAsStringAsync();

                return (string)JObject.Parse(responseBody)["X-CSRFToken"];
            }
            catch { return null; }
        }

        private async Task UpdateToken(HttpResponseMessage response)
        {
            /*
             * Reads the response body and updates the users token
             * 
             * Arguments
             *  Server response: HttpResponseMessage
             *      A response object containing the CSRF token
             */

            // Read token value
            string responseBody = await response.Content.ReadAsStringAsync();
            var token = (string)JObject.Parse(responseBody)["X-CSRFToken"];

            // Update token in database for user
            await App.Udatabase.UpdateUserTokenAsync(App.user, token);
        }

        private async Task ExpireUserSession()
        {
            App.user = null;
            await App.Current.MainPage.Navigation.PushAsync(new LoginPage());
        }

        public async Task<(int, string)> RegisterAsync(string username, string email, string password, string confirm)
        {
            /*
             * Sends a POST request to the server to register a new user
             * 
             * Arguments
             *  username: string
             *      Users name
             *  email: string
             *      Users email
             *  password: string
             *      Users password
             *  confirm: string
             *      Users password again
             * 
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             * 
             * Note
             * - Cannot send register request if user is already signed in
             */

            if (App.user != null)
                return (0, "You are already logged in");

            try
            {
                string token = await FetchToken();
                if (token == null)
                    return (0, "Failed to contact server");

                var data = new
                {
                    username = username,
                    email = email,
                    password = password,
                    confirm = confirm
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "u/register", content, token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                return (response.IsSuccessStatusCode) ? (1, "Successfully registered user") : (0, "Invalid input");
            }
            catch { return (0, "Failed to contact server"); }

        }

        public async Task<(int, string)> LoginAsync(string username, string password)
        {
            /*
             * Sends a POST request to log in the user
             * On succesful authentication the users token is updated
             * 
             * Arguments
             *  username: string
             *      Users name
             *  email: string
             *      Users email
             *  password: string
             *      Users password
             *  confirm: string
             *      Users password again
             * 
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send login request if user is already signed in
             */

            if (App.user != null)
                return (0, "You are already logged in");

            try
            {
                string token = await FetchToken();
                if (token == null)
                    return (0, "Failed to contact server");

                var data = new
                {
                    username = username,
                    password = password
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "u/login", content, token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                {
                    App.user = await App.Udatabase.GetUserEntryAsync(username);
                    await UpdateToken(response);
                }

                return (response.IsSuccessStatusCode) ? (1, "Successfully logged in") : (0, "Invalid credentials");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string)> LogoutAsync()
        {
            /*
             * Sends a POST request to log out the user
             * 
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             * 
             * Note
             * - Cannot send logout request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                var data = new
                {
                    username = App.user.Username,
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "u/logout", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);
                return (response.IsSuccessStatusCode) ? (1, "Successfully logged out") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string)> DeleteAccount()
        {
            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                var data = new
                {
                    username = App.user.Username,
                    password = App.user.Password
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "u/delete-account", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);
                if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully deleted account") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string)> DeleteAllData()
        {
            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                var data = new
                {
                    username = App.user.Username,
                    password = App.user.Password
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "u/delete-all-data", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully deleted all data") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string, int)> AddOrUpdateBGLAsync(float value, DateTime time, int server_id = -1)
        {
            /*
             * Sends a POST request to add or update bgl entry
             * On succesful request the users token is updated
             * 
             * Arguments
             *  value: float
             *      BGL value
             *  time: DateTime
             *      Date and time of input
             *  server_id: int
             *      ID to identify the entry (server side)
             * 
             * Return
             * code, message, s_id: int, string, int
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *      s_id: primary id in server database
             *
             * Note
             * - Cannot send request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in", -1);

            try
            {
                long unixTime = ((DateTimeOffset)time).ToUnixTimeSeconds();

                var data = new
                {
                    username = App.user.Username,
                    value = value,
                    timestamp = unixTime,
                    server_id = server_id
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "s/bgl/set", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);
                string responseBody = await response.Content.ReadAsStringAsync();

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully added/updated entry", (int)JObject.Parse(responseBody)["SERVERID"]) : (0, "Session timed out", -1);
            }
            catch { return (0, "Failed to contact server", -1); }
        }

        public async Task<(int, string)> FetchBGLAsync(DateTime time)
        {
            /*
             * Sends a GET request to fetch all entries after timestamp
             * On succesful request the users token is updated
             * 
             * Arguments
             *  time: DateTime
             *      Date and time of input
             * 
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                long unixTime = ((DateTimeOffset)time).ToUnixTimeSeconds();

                var data = new
                {
                    username = App.user.Username,
                    timestamp = unixTime
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Get, "s/bgl/get", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully fetched entry/entries") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string)> DeleteBGLAsync(int server_id)
        {
            /*
             * Sends a POST request to delete specified entry
             * On succesful request the users token is updated
             * 
             * Arguments
             *  server_id: int
             *      ID to identify the entry (server side)
             *      
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send request if user is not logged in
             * - Cannot delete entries that does not belong to the user
             * - Cannot delete entries that do not match the identifier
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                var data = new
                {
                    username = App.user.Username,
                    identifier = server_id
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "s/bgl/del", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully deleted entry") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string, int)> AddOrUpdateSleepAsync(DateTime start, DateTime stop, int server_id = -1)
        {
            /*
             * Sends a POST request to add or update sleep entry
             * On succesful request the users token is updated
             * 
             * Arguments
             *  start: DateTime
             *      Date and time when user went to sleep
             *  stop: DateTime
             *      Date and time when user woke up
             *  server_id: int
             *      ID to identify the entry (server side)
             * 
             * Return
             * code, message, s_id: int, string, int
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *      s_id: primary id in server database
             *
             * Note
             * - Cannot send request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in", -1);

            try
            {
                long unixStart = ((DateTimeOffset)start).ToUnixTimeSeconds();
                long unixStop = ((DateTimeOffset)stop).ToUnixTimeSeconds();

                var data = new
                {
                    username = App.user.Username,
                    start = unixStart,
                    stop = unixStop,
                    server_id = server_id
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "s/sleep/set", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);
                string responseBody = await response.Content.ReadAsStringAsync();

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully added/updated entry", (int)JObject.Parse(responseBody)["SERVERID"]) : (0, "Session timed out", -1);
            }
            catch { return (0, "Failed to contact server", -1); }
        }

        public async Task<(int, string)> FetchSleepAsync(DateTime time)
        {
            /*
             * Sends a GET request to fetch all entries after timestamp
             * On succesful request the users token is updated
             * 
             * Arguments
             *  time: DateTime
             *      Date and time of input
             * 
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                long unixTime = ((DateTimeOffset)time).ToUnixTimeSeconds();

                var data = new
                {
                    username = App.user.Username,
                    timestamp = unixTime
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Get, "s/sleep/get", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully fetched entry/entries") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string)> DeleteSleepAsync(int server_id)
        {
            /*
             * Sends a POST request to delete specified entry
             * On succesful request the users token is updated
             * 
             * Arguments
             *  server_id: int
             *      ID to identify the entry (server side)
             *      
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send request if user is not logged in
             * - Cannot delete entries that does not belong to the user
             * - Cannot delete entries that do not match the identifier
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                var data = new
                {
                    username = App.user.Username,
                    identifier = server_id
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "s/sleep/del", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully deleted entry") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string, int)> AddOrUpdateCIAsync(float value, string name, DateTime time, int server_id = -1)
        {
            /*
             * Sends a POST request to add or update carbohydrate entry entry
             * On succesful request the users token is updated
             * 
             * Arguments
             *  value: float
             *      BGL value
             *  name: string
             *      Name of food/drink
             *  time: DateTime
             *      Date and time of input
             *  server_id: int
             *      ID to identify the entry (server side)
             * 
             * Return
             * code, message, s_id: int, string, int
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *      s_id: entrys id in server database
             *
             * Note
             * - Cannot send request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in", -1);

            try
            {

                long unixTime = ((DateTimeOffset)time).ToUnixTimeSeconds();

                var data = new
                {
                    username = App.user.Username,
                    value = value,
                    name = name,
                    timestamp = unixTime,
                    server_id = server_id
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "s/ci/set", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);
                string responseBody = await response.Content.ReadAsStringAsync();

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully added/updated entry", (int)JObject.Parse(responseBody)["SERVERID"]) : (0, "Session timed out", -1);
            }
            catch { return (0, "Failed to contact server", -1); }
        }

        public async Task<(int, string)> FetchCIAsync(DateTime time)
        {
            /*
             * Sends a GET request to fetch all entries after timestamp
             * On succesful request the users token is updated
             * 
             * Arguments
             *  time: DateTime
             *      Date and time of input
             * 
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                long unixTime = ((DateTimeOffset)time).ToUnixTimeSeconds();

                var data = new
                {
                    username = App.user.Username,
                    timestamp = unixTime
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Get, "s/ci/get", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully fetched entry/entries") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string)> DeleteCIAsync(int server_id)
        {
            /*
             * Sends a POST request to delete specified entry
             * On succesful request the users token is updated
             * 
             * Arguments
             *  server_id: int
             *      ID to identify the entry (server side)
             *      
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send request if user is not logged in
             * - Cannot delete entries that does not belong to the user
             * - Cannot delete entries that do not match the identifier
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                var data = new
                {
                    username = App.user.Username,
                    identifier = server_id
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "s/ci/del", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully deleted entry") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string, int)> AddOrUpdateMoodAsync(int value, DateTime date, int server_id = -1)
        {
            /*
             * Sends a POST request to add or update carbohydrate entry entry
             * On succesful request the users token is updated
             * 
             * Arguments
             *  value: float
             *      BGL value
             *  name: string
             *      Name of food/drink
             *  time: DateTime
             *      Date and time of input
             *  server_id: int
             *      ID to identify the entry (server side)
             * 
             * Return
             * code, message, s_id: int, string, int
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *      s_id: entrys id in server database
             *
             * Note
             * - Cannot send request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in", -1);

            try
            {
                long unixTime = ((DateTimeOffset)date).ToUnixTimeSeconds();

                var data = new
                {
                    username = App.user.Username,
                    value = value,
                    timestamp = unixTime,
                    server_id = server_id
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "s/mood/set", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);
                string responseBody = await response.Content.ReadAsStringAsync();

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully added/updated entry", (int)JObject.Parse(responseBody)["SERVERID"]) : (0, "Session timed out", -1);
            }
            catch { return (0, "Failed to contact server", -1); }
        }

        public async Task<(int, string)> FetchMoodAsync(DateTime date)
        {
            /*
             * Sends a GET request to fetch all entries after timestamp
             * On succesful request the users token is updated
             * 
             * Arguments
             *  time: DateTime
             *      Date and time of input
             * 
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                long unixTime = ((DateTimeOffset)date).ToUnixTimeSeconds();

                var data = new
                {
                    username = App.user.Username,
                    timestamp = unixTime
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Get, "s/mood/get", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully fetched entry/entries") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string)> DeleteMoodAsync(int server_id)
        {
            /*
             * Sends a POST request to delete specified entry
             * On succesful request the users token is updated
             * 
             * Arguments
             *  server_id: int
             *      ID to identify the entry (server side)
             *      
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send request if user is not logged in
             * - Cannot delete entries that does not belong to the user
             * - Cannot delete entries that do not match the identifier
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                var data = new
                {
                    username = App.user.Username,
                    identifier = server_id
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "s/mood/del", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully deleted entry") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string, int)> AddOrUpdateExerciseAsync(string name, DateTime start, DateTime stop, int server_id = -1)
        {
            /*
             * Sends a POST request to add or update sleep entry
             * On succesful request the users token is updated
             * 
             * Arguments
             *  start: DateTime
             *      Date and time when user went to sleep
             *  stop: DateTime
             *      Date and time when user woke up
             *  server_id: int
             *      ID to identify the entry (server side)
             * 
             * Return
             * code, message, s_id: int, string, int
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *      s_id: primary id in server database
             *
             * Note
             * - Cannot send request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in", -1);

            try
            {
                long unixStart = ((DateTimeOffset)start).ToUnixTimeSeconds();
                long unixStop = ((DateTimeOffset)stop).ToUnixTimeSeconds();

                var data = new
                {
                    username = App.user.Username,
                    name = name,
                    start = unixStart,
                    stop = unixStop,
                    server_id = server_id
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "s/exercise/set", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);
                string responseBody = await response.Content.ReadAsStringAsync();

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully added/updated entry", (int)JObject.Parse(responseBody)["SERVERID"]) : (0, "Session timed out", -1);
            }
            catch { return (0, "Failed to contact server", -1); }
        }

        public async Task<(int, string)> FetchExerciseAsync(string name, DateTime time)
        {
            /*
             * Sends a GET request to fetch all entries after timestamp
             * On succesful request the users token is updated
             * 
             * Arguments
             *  time: DateTime
             *      Date and time of input
             * 
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send request if user is not logged in
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                long unixTime = ((DateTimeOffset)time).ToUnixTimeSeconds();

                var data = new
                {
                    username = App.user.Username,
                    name = name,
                    timestamp = unixTime
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Get, "s/exercise/get", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully fetched entry/entries") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }

        public async Task<(int, string)> DeleteExerciseAsync(int server_id)
        {
            /*
             * Sends a POST request to delete specified entry
             * On succesful request the users token is updated
             * 
             * Arguments
             *  server_id: int
             *      ID to identify the entry (server side)
             *      
             * Return
             * code, message: int, string
             *      code: 0 -> fail | 1 -> success
             *      message: message from server
             *
             * Note
             * - Cannot send request if user is not logged in
             * - Cannot delete entries that does not belong to the user
             * - Cannot delete entries that do not match the identifier
             */

            if (App.user == null)
                return (0, "You are not signed in");

            try
            {
                var data = new
                {
                    username = App.user.Username,
                    identifier = server_id
                };
                string content = JsonConvert.SerializeObject(data);

                var httpRequestMessage = createHttpRequestMessage(HttpMethod.Post, "s/exercise/del", content, App.user.Token);

                HttpResponseMessage response = await HttpClient.SendAsync(httpRequestMessage);

                // On success, update user and token
                if (response.IsSuccessStatusCode)
                    await UpdateToken(response);

                // Log out user if token has expired
                else if ((int)response.StatusCode == 498)
                    await ExpireUserSession();

                return (response.IsSuccessStatusCode) ? (1, "Successfully deleted entry") : (0, "Session timed out");
            }
            catch { return (0, "Failed to contact server"); }
        }
    }
}